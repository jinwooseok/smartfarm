"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 4.0.3.

Django의 기본 설정 및 변수를 정의한 파일
dev.py는 개발 환경 설정 파일이며, prod.py는 배포 환경 설정 파일이다.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""
from pathlib import Path
import os
import json
from django.core.exceptions import ImproperlyConfigured
# 프로젝트 내 ROOT 디렉토리 설정
BASE_DIR = Path(__file__).resolve().parent.parent.parent

def get_secret(setting):
    '''
    설명
        secrets.json 파일을 통해 비밀변수를 가져오는 함수
    '''
    with open(os.path.join(BASE_DIR,'secrets.json'), encoding='utf-8') as f:
        secrets = json.loads(f.read())
    #비밀 변수를 가져오거나 명시적 예외를 반환한다.
    try:
        return secrets[setting]
    except KeyError as exc:
        error_msg = "Set the %s environment variable",(setting)
        raise ImproperlyConfigured(error_msg) from exc

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: 서버의 보안과 관련된 비밀키
SECRET_KEY = get_secret('SECRET_KEY')

# SECURITY WARNING: 개발 모드 여부. 배포 시 반드시 False로 변경
DEBUG = True

# SECURITY WARNING: 배포 시 허용할 호스트. 모든 호스트 허용 시 ['*']
ALLOWED_HOSTS = ['*']


# Application definition
# 설치된 앱들을 나열하는 곳. 앱을 추가하고 싶다면 이곳에 등록해야함
INSTALLED_APPS = [
    #default
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    #custom
    'smartfarm',
    'users',
    'common',
    'file',
    'file_data',
    'farm_process',
    'feature',
    'data_analytics',
    #크로스도메인 보안 관련. 나중에 세부 설정 필요할 수 있음
    'corsheaders',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware', #보안 미들웨어
    'django.contrib.sessions.middleware.SessionMiddleware', #세션 미들웨어
    'django.middleware.common.CommonMiddleware', #django 공통 미들웨어
    'django.middleware.csrf.CsrfViewMiddleware', #csrf 미들웨어
    'django.contrib.auth.middleware.AuthenticationMiddleware', #인증 미들웨어
    'django.contrib.messages.middleware.MessageMiddleware', #메시지 미들웨어
    'django.middleware.clickjacking.XFrameOptionsMiddleware', #X-Frame-Options 미들웨어
    #cors header
    "corsheaders.middleware.CorsMiddleware", #크로스도메인 미들웨어
]

ROOT_URLCONF = 'config.urls' #프로젝트의 URL 설정 파일

#Django의 정적 파일을 모아둘 디렉토리 설정
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application' #django 웹 서버


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

# 데이터베이스 설정. secrets.json 파일을 통해 비밀변수를 가져옴. secrets.json에 해당 변수를 선언함으로 호출 가능
# DATABASES = {
#     'default' : {
#         'ENGINE': get_secret("DATABASE_ENGINE"),
#         'NAME': get_secret("DATABASE_NAME"),
#         'USER': get_secret("DATABASE_USER"),
#         'PASSWORD': get_secret("DATABASE_PASSWORD"),
#         'HOST': get_secret("DATABASE_HOST" ),
#         'PORT': get_secret("DATABASE_PORT"),
#     }
# }

#현재 사용중인 db.sqlite3 데이터베이스 호출 설정
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField' #DB에서 자동으로 생성하는 기본 키 타입

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    { # 비밀번호 유사성 검사
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    { # 최소 길이 검사
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    { # 숫자 포함 검사
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us' #ko-kr로 변경 시 한국어로 설정 가능

TIME_ZONE = 'Asia/Seoul' #서울 시간대로 설정

USE_I18N = True #다국어 지원

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

#정적 파일 경로 설정
STATIC_URL = '/templates/'
STATICFILES_DIRS = [
    BASE_DIR / 'templates',
]

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

# 클라이언트로부터 전달받은 파일을 저장하는 핸들러
FILE_UPLOAD_HANDLERS = [
    'django.core.files.uploadhandler.MemoryFileUploadHandler',
    'django.core.files.uploadhandler.TemporaryFileUploadHandler',
]

#클라이언트 - 서버 간 파일 및 데이터 교환 시 사용되는 설정 - 최대 100MB
MAX_UPLOAD_SIZE = 104857600
DATA_UPLOAD_MAX_MEMORY_SIZE = None
FILE_UPLOAD_MAX_MEMORY_SIZE = 104857600
DATA_UPLOAD_MAX_NUMBER_FIELDS = None


#CORS 크로스 도메인 이슈 - 나중에 세부 설정할 것
SECURE_CROSS_ORIGIN_OPENER_POLICY = None

#REST 프레임워크 설정
REST_FRAMEWORK = {
    #기본적으로 사용할 인가방식 설정 - 세션 방식
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ),
    #예외처리 핸들러 설정. 현재 커스텀한 common.base_exception_handler로 설정
    'EXCEPTION_HANDLER': 'common.base_exception_handler.base_exception_handler',
    # 기본적으로 사용할 렌더링 방식 설정 - JSON 방식
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    ),
    #기본적으로 사용할 페이지네이션 방식 설정 - 데이터 호출 시 기본으로 한 페이지 당 10개의 데이터
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE':10
}

#로그 관련 설정.
DEFAULT_LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        }
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
        },
        'django.server': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'django.server',
        },
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'debug.log')
            }
    },
    'loggers': {
        'django': {
            'handlers': ['console','file'],
            'level': 'INFO',
        },
        'django.server': {
            'handlers': ['django.server','file'],
            'level': 'INFO',
            'propagate': False,
        }
    }
}

#캐시 설정 - 현재 redis를 사용하도록 설정
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}

#세션 쿠키의 만료시간을 6000초로 설정
SESSION_COOKIE_AGE = 6000

#세션을 각 요청마다 저장하도록 설정 - 즉, 마지막 요청으로부터 6000초동안 세션 유지
SESSION_SAVE_EVERY_REQUEST = True

#세션 쿠키의 SameSite 설정을 None으로 설정. 모든 요청자의 쿠키를 받을 수 있음
SESSION_COOKIE_SAMESITE = None

#ETag 사용 설정 - 현재 사용하지 않음
USE_ETAGS = False

#CORS 설정 - 모든 도메인을 허용하도록 설정
CORS_ORIGIN_ALLOW_ALL = True

#CORS 설정 - 쿠키 허용 설정
CORS_ALLOW_CREDENTIALS = True
